[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "stable-worldmodel"
description = "Stable Library for evaluate and conduct world model research"
authors = []
license = {text = "MIT"}
readme = {file = "README.md", content-type = "text/markdown"}
dependencies = [
    # Core dependencies - minimal required for basic SSL training
    "torch",
    "torchvision",
    "transformers",
    "torchmetrics",
    "lightning",
    "hydra-core",
    "loguru",
    "tabulate",
    "gymnasium[all]",
    "minari",
    "stable-pretraining",
    "nevergrad",
    "einops",
    "datasets",
]

dynamic = ["version"]

[project.scripts]
stable-worldmodel = "stable_worldmodel.cli:app"
swm = "stable_worldmodel.cli:app"

[tool.setuptools]
packages = ["stable_worldmodel"]

[tool.setuptools.dynamic]
version = {attr = "stable_worldmodel.__about__.__version__"}

[project.optional-dependencies]
# Development tools
dev = [
    "pytest",
    "coverage",
    "pytest-cov",
    "pytest-rich",
    "codecov",
    "pre-commit",
    "ruff",
]

# Documentation tools
doc = [
    "sphinx",
    "sphinx-gallery",
    "sphinx-book-theme",
    "sphinxcontrib-bibtex",
    "matplotlib",
    "memory_profiler",
    "myst-parser",
]


# =======================
#         TOOLS
# =======================

###################
## Pytest config ##
###################

[tool.pytest.ini_options]
pythonpath = "stable_worldmodel"

#####################
## Coverage config ##
#####################

[tool.coverage.run]
source = ["stable_worldmodel"]
omit = []

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise",
    "except",
    "register_parameter"
]

#################
## Ruff config ##
#################

# NOTE: borrowed and adapted from: huggingface/transformers

[tool.ruff]
target-version = "py310"
line-length = 119
fix = true

[tool.ruff.lint]
# Never enforce `E501` (line length violations).
# SIM300: Yoda condition detected
# SIM212: Checks for if expressions that check against a negated condition.
# SIM905: Consider using a list literal instead of `str.split`
# UP009: UTF-8 encoding declaration is unnecessary
# UP015: Unnecessary mode argument
# UP031: Use format specifiers instead of percent format
# UP004: Class `XXX` inherits from `object`
# UP028: Checks for for loops that can be replaced with yield from expressions
# UP045: Use `X | None` for type annotations
# UP007: Use `X | Y` for type annotations
# UP035: temporarily disabled to minimize upgrade changes
ignore = ["C901", "E501", "E741", "F402", "F823", "SIM1", "SIM300", "SIM212", "SIM905", "UP009", "UP015", "UP031", "UP028", "UP004", "UP045", "UP007", "UP035"]
# RUF013: Checks for the use of implicit Optional
#  in type annotations when the default parameter value is None.
select = ["C", "E", "F", "I", "W", "RUF013", "PERF102", "PLC1802", "PLC0208", "SIM", "UP"]
extend-safe-fixes = ["UP006"]

# old: config
# select = ["E4", "E7", "E9", "F", "D"]
# ignore = ["D100", "D102", "D103", "D104", "D105", "D107"]

[tool.ruff.lint.isort]
lines-after-imports = 2
known-first-party = ["stable_worldmodel"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"
