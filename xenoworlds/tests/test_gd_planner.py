import pytest
import os

os.environ["MUJOCO_GL"] = "egl"


@pytest.mark.parametrize(
    "env",
    [
        "CartPole-v1",
        "MountainCar-v0",
        "MountainCarContinuous-v0",
        "Pendulum-v1",
        "Acrobot-v1",
        "phys2d/CartPole-v1",
        "phys2d/Pendulum-v0",
        "LunarLander-v3",
        "LunarLanderContinuous-v3",
        "BipedalWalker-v3",
        "BipedalWalkerHardcore-v3",
        "CarRacing-v3",
        "Blackjack-v1",
        "FrozenLake-v1",
        "FrozenLake8x8-v1",
        "CliffWalking-v1",
        "CliffWalkingSlippery-v1",
        "Taxi-v3",
        "tabular/Blackjack-v0",
        "tabular/CliffWalking-v0",
        "Reacher-v5",
        "Pusher-v5",
        "InvertedPendulum-v5",
        "InvertedDoublePendulum-v5",
        "HalfCheetah-v5",
        "Hopper-v5",
        "Swimmer-v5",
        "Walker2d-v5",
        "Ant-v5",
        "Humanoid-v5",
        "HumanoidStandup-v5",
        # "FetchPickAndPlace-v3",
        # "FetchReach-v3",
        # "FetchPush-v3",
        # "HandReach-v2",
        # "HandManipulateBlockRotateZ-v1",
        # "HandManipulateBlockRotateZ_BooleanTouchSensors-v1",
        # "HandManipulateBlockRotateZ_ContinuousTouchSensors-v1",
        # "HandManipulateBlockRotateParallel-v1",
        # "HandManipulateBlockRotateParallel_BooleanTouchSensors-v1",
        # "HandManipulateBlockRotateParallel_ContinuousTouchSensors-v1",
        # "HandManipulateBlockRotateXYZ-v1",
        # "HandManipulateBlockRotateXYZ_BooleanTouchSensors-v1",
        # "HandManipulateBlockRotateXYZ_ContinuousTouchSensors-v1",
        # "HandManipulateBlockFull-v1",
        # "HandManipulateBlock-v1",
        # "HandManipulateBlock_BooleanTouchSensors-v1",
        # "HandManipulateBlock_ContinuousTouchSensors-v1",
        # "HandManipulateEggRotate-v1",
        # "HandManipulateEggRotate_BooleanTouchSensors-v1",
        # "HandManipulateEggRotate_ContinuousTouchSensors-v1",
        # "HandManipulateEggFull-v1",
        # "HandManipulateEgg-v1",
        # "HandManipulateEgg_BooleanTouchSensors-v1",
        # "HandManipulateEgg_ContinuousTouchSensors-v1",
        # "HandManipulatePenRotate-v1",
        # "HandManipulatePenRotate_BooleanTouchSensors-v1",
        # "HandManipulatePenRotate_ContinuousTouchSensors-v1",
        # "HandManipulatePenFull-v1",
        # "HandManipulatePen-v1",
        # "HandManipulatePen_BooleanTouchSensors-v1",
        # "HandManipulatePen_ContinuousTouchSensors-v1",
        "AntMaze_UMaze-v1",
        "AntMaze_Open-v1",
        "AntMaze_Open_Diverse_G-v1",
        "AntMaze_Open_Diverse_GR-v1",
        "AntMaze_Medium-v1",
        "AntMaze_Medium_Diverse_G-v1",
        "AntMaze_Medium_Diverse_GR-v1",
        "AntMaze_Large-v1",
        "AntMaze_Large_Diverse_G-v1",
        "AntMaze_Large_Diverse_GR-v1",
        "AntMaze_UMaze-v5",
        "AntMaze_Open-v5",
        "AntMaze_Open_Diverse_G-v5",
        "AntMaze_Open_Diverse_GR-v5",
        "AntMaze_Medium-v5",
        "AntMaze_Medium_Diverse_G-v5",
        "AntMaze_Medium_Diverse_GR-v5",
        "AntMaze_Large-v5",
        "AntMaze_Large_Diverse_G-v5",
        "AntMaze_Large_Diverse_GR-v5",
        "PointMaze_UMaze-v3",
        "PointMaze_Open-v3",
        "PointMaze_Open_Diverse_G-v3",
        "PointMaze_Open_Diverse_GR-v3",
        "PointMaze_Medium-v3",
        "PointMaze_Medium_Diverse_G-v3",
        "PointMaze_Medium_Diverse_GR-v3",
        "PointMaze_Large-v3",
        "PointMaze_Large_Diverse_G-v3",
        "PointMaze_Large_Diverse_GR-v3",
        # "FetchSlideDense-v3",
        # "FetchPickAndPlaceDense-v3",
        # "FetchReachDense-v3",
        # "FetchPushDense-v3",
        # "HandReachDense-v2",
        # "HandManipulateBlockRotateZDense-v1",
        # "HandManipulateBlockRotateZ_BooleanTouchSensorsDense-v1",
        # "HandManipulateBlockRotateZ_ContinuousTouchSensorsDense-v1",
        # "HandManipulateBlockRotateParallelDense-v0",
        # "HandManipulateBlockRotateParallelDense-v1",
        # "HandManipulateBlockRotateParallel_BooleanTouchSensorsDense-v0",
        # "HandManipulateBlockRotateParallel_BooleanTouchSensorsDense-v1",
        # "HandManipulateBlockRotateParallel_ContinuousTouchSensorsDense-v0",
        # "HandManipulateBlockRotateParallel_ContinuousTouchSensorsDense-v1",
        # "HandManipulateBlockRotateXYZDense-v0",
        # "HandManipulateBlockRotateXYZDense-v1",
        # "HandManipulateBlockRotateXYZ_BooleanTouchSensorsDense-v0",
        # "HandManipulateBlockRotateXYZ_BooleanTouchSensorsDense-v1",
        # "HandManipulateBlockRotateXYZ_ContinuousTouchSensorsDense-v0",
        # "HandManipulateBlockRotateXYZ_ContinuousTouchSensorsDense-v1",
        # "HandManipulateBlockFullDense-v0",
        # "HandManipulateBlockFullDense-v1",
        # "HandManipulateBlockDense-v0",
        # "HandManipulateBlockDense-v1",
        # "HandManipulateBlock_BooleanTouchSensorsDense-v0",
        # "HandManipulateBlock_BooleanTouchSensorsDense-v1",
        # "HandManipulateBlock_ContinuousTouchSensorsDense-v0",
        # "HandManipulateBlock_ContinuousTouchSensorsDense-v1",
        # "HandManipulateEggRotateDense-v0",
        # "HandManipulateEggRotateDense-v1",
        # "HandManipulateEggRotate_BooleanTouchSensorsDense-v0",
        # "HandManipulateEggRotate_BooleanTouchSensorsDense-v1",
        # "HandManipulateEggRotate_ContinuousTouchSensorsDense-v0",
        # "HandManipulateEggRotate_ContinuousTouchSensorsDense-v1",
        # "HandManipulateEggFullDense-v0",
        # "HandManipulateEggFullDense-v1",
        # "HandManipulateEggDense-v0",
        # "HandManipulateEggDense-v1",
        # "HandManipulateEgg_BooleanTouchSensorsDense-v0",
        # "HandManipulateEgg_BooleanTouchSensorsDense-v1",
        # "HandManipulateEgg_ContinuousTouchSensorsDense-v0",
        # "HandManipulateEgg_ContinuousTouchSensorsDense-v1",
        # "HandManipulatePenRotateDense-v0",
        # "HandManipulatePenRotateDense-v1",
        # "HandManipulatePenRotate_BooleanTouchSensorsDense-v0",
        # "HandManipulatePenRotate_BooleanTouchSensorsDense-v1",
        # "HandManipulatePenRotate_ContinuousTouchSensorsDense-v0",
        # "HandManipulatePenRotate_ContinuousTouchSensorsDense-v1",
        # "HandManipulatePenFullDense-v0",
        # "HandManipulatePenFullDense-v1",
        # "HandManipulatePenDense-v0",
        # "HandManipulatePenDense-v1",
        # "HandManipulatePen_BooleanTouchSensorsDense-v0",
        # "HandManipulatePen_BooleanTouchSensorsDense-v1",
        # "HandManipulatePen_ContinuousTouchSensorsDense-v0",
        # "HandManipulatePen_ContinuousTouchSensorsDense-v1",
        "AntMaze_UMazeDense-v5",
        "AntMaze_OpenDense-v5",
        "AntMaze_Open_Diverse_GDense-v5",
        "AntMaze_Open_Diverse_GRDense-v5",
        "AntMaze_MediumDense-v5",
        "AntMaze_Medium_Diverse_GDense-v5",
        "AntMaze_Medium_Diverse_GRDense-v5",
        "AntMaze_LargeDense-v5",
        "AntMaze_Large_Diverse_GDense-v5",
        "AntMaze_Large_Diverse_GRDense-v5",
        "PointMaze_UMazeDense-v3",
        "PointMaze_OpenDense-v3",
        "PointMaze_Open_Diverse_GDense-v3",
        "PointMaze_Open_Diverse_GRDense-v3",
        "PointMaze_MediumDense-v3",
        "PointMaze_Medium_Diverse_GDense-v3",
        "PointMaze_Medium_Diverse_GRDense-v3",
        "PointMaze_LargeDense-v3",
        "PointMaze_Large_Diverse_GDense-v3",
        "PointMaze_Large_Diverse_GRDense-v3",
        "AdroitHandDoorSparse-v1",
        "AdroitHandHammerSparse-v1",
        "AdroitHandPenSparse-v1",
        "AdroitHandRelocateSparse-v1",
        "AdroitHandDoor-v1",
        "AdroitHandHammer-v1",
        "AdroitHandPen-v1",
        "AdroitHandRelocate-v1",
        "FrankaKitchen-v1",
    ],
)
def test_each_env(env):

    import gymnasium as gym
    import gymnasium_robotics
    import torch
    import xenoworlds
    from xenoworlds.planner import GD
    from gymnasium.spaces import Discrete, MultiDiscrete
    import numpy as np
    import ogbench

    wrappers = [
        # lambda x: RecordVideo(x, video_folder="./videos"),
        lambda x: xenoworlds.wrappers.AddRenderObservation(x, render_only=False),
        lambda x: xenoworlds.wrappers.TransformObservation(x),
    ]
    # print(ogbench.make_env_and_datasets(env, env_only=True))
    world = xenoworlds.World(env, num_envs=2, wrappers=wrappers, max_episode_steps=2)
    if isinstance(world.envs.action_space, MultiDiscrete):
        print("The action space is discrete.")
        return
    elif np.issubdtype(world.envs.action_space.dtype, np.integer):
        print("The action space is IntBox.")
        return

    print(world.envs.action_space, type(world.envs.action_space))
    world_model = xenoworlds.DummyWorldModel(
        image_shape=(3, 224, 224), action_dim=world.single_action_space.shape[0]
    )

    # print(sorted(envs))
    planner = GD(world_model, n_steps=5, action_space=world.action_space)
    # planner = CEMNevergrad(
    #     world_model, n_steps=100, action_space=world.action_space, planning_horizon=3
    # )
    agent = xenoworlds.Agent(planner, world)
    # 'FetchPush-v1'
    agent.run(episodes=1)
